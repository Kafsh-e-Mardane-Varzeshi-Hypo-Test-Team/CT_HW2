// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package generated

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ProblemStatus string

const (
	ProblemStatusDraft     ProblemStatus = "draft"
	ProblemStatusPublished ProblemStatus = "published"
)

func (e *ProblemStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProblemStatus(s)
	case string:
		*e = ProblemStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ProblemStatus: %T", src)
	}
	return nil
}

type NullProblemStatus struct {
	ProblemStatus ProblemStatus `json:"problem_status"`
	Valid         bool          `json:"valid"` // Valid is true if ProblemStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProblemStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ProblemStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProblemStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProblemStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProblemStatus), nil
}

type SubmissionStatus string

const (
	SubmissionStatusOK           SubmissionStatus = "OK"
	SubmissionStatusCompileError SubmissionStatus = "Compile Error"
	SubmissionStatusWrongAnswer  SubmissionStatus = "Wrong Answer"
	SubmissionStatusMemoryLimit  SubmissionStatus = "Memory Limit"
	SubmissionStatusTimeLimit    SubmissionStatus = "Time Limit"
	SubmissionStatusRuntimeError SubmissionStatus = "Runtime Error"
)

func (e *SubmissionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SubmissionStatus(s)
	case string:
		*e = SubmissionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for SubmissionStatus: %T", src)
	}
	return nil
}

type NullSubmissionStatus struct {
	SubmissionStatus SubmissionStatus `json:"submission_status"`
	Valid            bool             `json:"valid"` // Valid is true if SubmissionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSubmissionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.SubmissionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SubmissionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSubmissionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SubmissionStatus), nil
}

type UserRole string

const (
	UserRoleNormal UserRole = "normal"
	UserRoleAdmin  UserRole = "admin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Problem struct {
	ID            int32              `db:"id" json:"id"`
	Title         string             `db:"title" json:"title"`
	Statement     string             `db:"statement" json:"statement"`
	TimeLimitMs   int32              `db:"time_limit_ms" json:"time_limit_ms"`
	MemoryLimitMb int32              `db:"memory_limit_mb" json:"memory_limit_mb"`
	SampleInput   pgtype.Text        `db:"sample_input" json:"sample_input"`
	SampleOutput  pgtype.Text        `db:"sample_output" json:"sample_output"`
	OwnerID       int32              `db:"owner_id" json:"owner_id"`
	Status        ProblemStatus      `db:"status" json:"status"`
	CreatedAt     pgtype.Timestamptz `db:"created_at" json:"created_at"`
	ModifiedAt    pgtype.Timestamptz `db:"modified_at" json:"modified_at"`
}

type Submission struct {
	ID              int32              `db:"id" json:"id"`
	UserID          pgtype.Int4        `db:"user_id" json:"user_id"`
	ProblemID       pgtype.Int4        `db:"problem_id" json:"problem_id"`
	SourceCode      string             `db:"source_code" json:"source_code"`
	Status          SubmissionStatus   `db:"status" json:"status"`
	ExecutionTimeMs pgtype.Int4        `db:"execution_time_ms" json:"execution_time_ms"`
	MemoryUsedMb    pgtype.Int4        `db:"memory_used_mb" json:"memory_used_mb"`
	SubmittedAt     pgtype.Timestamptz `db:"submitted_at" json:"submitted_at"`
}

type TestCase struct {
	ID        int32       `db:"id" json:"id"`
	ProblemID pgtype.Int4 `db:"problem_id" json:"problem_id"`
	Input     string      `db:"input" json:"input"`
	Output    string      `db:"output" json:"output"`
}

type User struct {
	ID                int32              `db:"id" json:"id"`
	Username          string             `db:"username" json:"username"`
	EncryptedPassword string             `db:"encrypted_password" json:"encrypted_password"`
	Role              UserRole           `db:"role" json:"role"`
	CreatedAt         pgtype.Timestamptz `db:"created_at" json:"created_at"`
}
