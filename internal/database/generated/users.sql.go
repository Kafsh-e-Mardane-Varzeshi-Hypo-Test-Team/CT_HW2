// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package generated

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, encrypted_password, role
) VALUES (
  $1, $2, $3::user_role
)
RETURNING id, username, encrypted_password, role, created_at
`

type CreateUserParams struct {
	Username          string   `db:"username" json:"username"`
	EncryptedPassword string   `db:"encrypted_password" json:"encrypted_password"`
	Role              UserRole `db:"role" json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.EncryptedPassword, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.EncryptedPassword,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, encrypted_password, role, created_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.EncryptedPassword,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, encrypted_password, role, created_at FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.EncryptedPassword,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, encrypted_password, role, created_at FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.EncryptedPassword,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $1, 
    encrypted_password = $2, 
    role = $3::user_role
WHERE id = $4
RETURNING id, username, encrypted_password, role, created_at
`

type UpdateUserParams struct {
	Username          string   `db:"username" json:"username"`
	EncryptedPassword string   `db:"encrypted_password" json:"encrypted_password"`
	Role              UserRole `db:"role" json:"role"`
	ID                int32    `db:"id" json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.EncryptedPassword,
		arg.Role,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.EncryptedPassword,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}
