// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: problems.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProblem = `-- name: CreateProblem :one
INSERT INTO problems (
  title, statement, time_limit_ms, memory_limit_mb, 
  sample_input, sample_output, owner_id, status
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8::problem_status
)
RETURNING id, title, statement, time_limit_ms, memory_limit_mb, sample_input, sample_output, owner_id, status, created_at, modified_at
`

type CreateProblemParams struct {
	Title         string        `db:"title" json:"title"`
	Statement     string        `db:"statement" json:"statement"`
	TimeLimitMs   int32         `db:"time_limit_ms" json:"time_limit_ms"`
	MemoryLimitMb int32         `db:"memory_limit_mb" json:"memory_limit_mb"`
	SampleInput   pgtype.Text   `db:"sample_input" json:"sample_input"`
	SampleOutput  pgtype.Text   `db:"sample_output" json:"sample_output"`
	OwnerID       int32         `db:"owner_id" json:"owner_id"`
	Column8       ProblemStatus `db:"column_8" json:"column_8"`
}

func (q *Queries) CreateProblem(ctx context.Context, db DBTX, arg CreateProblemParams) (Problem, error) {
	row := db.QueryRow(ctx, createProblem,
		arg.Title,
		arg.Statement,
		arg.TimeLimitMs,
		arg.MemoryLimitMb,
		arg.SampleInput,
		arg.SampleOutput,
		arg.OwnerID,
		arg.Column8,
	)
	var i Problem
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Statement,
		&i.TimeLimitMs,
		&i.MemoryLimitMb,
		&i.SampleInput,
		&i.SampleOutput,
		&i.OwnerID,
		&i.Status,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteProblem = `-- name: DeleteProblem :exec
DELETE FROM problems
WHERE id = $1
`

func (q *Queries) DeleteProblem(ctx context.Context, db DBTX, id int32) error {
	_, err := db.Exec(ctx, deleteProblem, id)
	return err
}

const getProblemById = `-- name: GetProblemById :one
SELECT id, title, statement, time_limit_ms, memory_limit_mb, sample_input, sample_output, owner_id, status, created_at, modified_at FROM problems
WHERE id = $1
`

func (q *Queries) GetProblemById(ctx context.Context, db DBTX, id int32) (Problem, error) {
	row := db.QueryRow(ctx, getProblemById, id)
	var i Problem
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Statement,
		&i.TimeLimitMs,
		&i.MemoryLimitMb,
		&i.SampleInput,
		&i.SampleOutput,
		&i.OwnerID,
		&i.Status,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const listPublishedProblems = `-- name: ListPublishedProblems :many
SELECT id, title, statement, time_limit_ms, memory_limit_mb, sample_input, sample_output, owner_id, status, created_at, modified_at FROM problems
WHERE status = 'published'
ORDER BY id
`

func (q *Queries) ListPublishedProblems(ctx context.Context, db DBTX) ([]Problem, error) {
	rows, err := db.Query(ctx, listPublishedProblems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Problem
	for rows.Next() {
		var i Problem
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Statement,
			&i.TimeLimitMs,
			&i.MemoryLimitMb,
			&i.SampleInput,
			&i.SampleOutput,
			&i.OwnerID,
			&i.Status,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserProblems = `-- name: ListUserProblems :many
SELECT id, title, statement, time_limit_ms, memory_limit_mb, sample_input, sample_output, owner_id, status, created_at, modified_at FROM problems
WHERE owner_id = $1
ORDER BY id
`

func (q *Queries) ListUserProblems(ctx context.Context, db DBTX, ownerID int32) ([]Problem, error) {
	rows, err := db.Query(ctx, listUserProblems, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Problem
	for rows.Next() {
		var i Problem
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Statement,
			&i.TimeLimitMs,
			&i.MemoryLimitMb,
			&i.SampleInput,
			&i.SampleOutput,
			&i.OwnerID,
			&i.Status,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProblem = `-- name: UpdateProblem :one
UPDATE problems
SET title = $2, 
    statement = $3, 
    time_limit_ms = $4, 
    memory_limit_mb = $5, 
    sample_input = $6, 
    sample_output = $7, 
    status = $8::problem_status
WHERE id = $1
RETURNING id, title, statement, time_limit_ms, memory_limit_mb, sample_input, sample_output, owner_id, status, created_at, modified_at
`

type UpdateProblemParams struct {
	ID            int32         `db:"id" json:"id"`
	Title         string        `db:"title" json:"title"`
	Statement     string        `db:"statement" json:"statement"`
	TimeLimitMs   int32         `db:"time_limit_ms" json:"time_limit_ms"`
	MemoryLimitMb int32         `db:"memory_limit_mb" json:"memory_limit_mb"`
	SampleInput   pgtype.Text   `db:"sample_input" json:"sample_input"`
	SampleOutput  pgtype.Text   `db:"sample_output" json:"sample_output"`
	Column8       ProblemStatus `db:"column_8" json:"column_8"`
}

func (q *Queries) UpdateProblem(ctx context.Context, db DBTX, arg UpdateProblemParams) (Problem, error) {
	row := db.QueryRow(ctx, updateProblem,
		arg.ID,
		arg.Title,
		arg.Statement,
		arg.TimeLimitMs,
		arg.MemoryLimitMb,
		arg.SampleInput,
		arg.SampleOutput,
		arg.Column8,
	)
	var i Problem
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Statement,
		&i.TimeLimitMs,
		&i.MemoryLimitMb,
		&i.SampleInput,
		&i.SampleOutput,
		&i.OwnerID,
		&i.Status,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}
