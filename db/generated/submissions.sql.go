// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: submissions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSubmission = `-- name: CreateSubmission :one
INSERT INTO submissions (
  user_id, problem_id, source_code, status
) VALUES (
  $1, $2, $3, $4::submission_status
)
RETURNING id, user_id, problem_id, source_code, status, execution_time_ms, memory_used_mb, submitted_at
`

type CreateSubmissionParams struct {
	UserID     pgtype.Int4      `db:"user_id" json:"user_id"`
	ProblemID  pgtype.Int4      `db:"problem_id" json:"problem_id"`
	SourceCode string           `db:"source_code" json:"source_code"`
	Column4    SubmissionStatus `db:"column_4" json:"column_4"`
}

func (q *Queries) CreateSubmission(ctx context.Context, db DBTX, arg CreateSubmissionParams) (Submission, error) {
	row := db.QueryRow(ctx, createSubmission,
		arg.UserID,
		arg.ProblemID,
		arg.SourceCode,
		arg.Column4,
	)
	var i Submission
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProblemID,
		&i.SourceCode,
		&i.Status,
		&i.ExecutionTimeMs,
		&i.MemoryUsedMb,
		&i.SubmittedAt,
	)
	return i, err
}

const getSubmissionById = `-- name: GetSubmissionById :one
SELECT id, user_id, problem_id, source_code, status, execution_time_ms, memory_used_mb, submitted_at FROM submissions
WHERE id = $1
`

func (q *Queries) GetSubmissionById(ctx context.Context, db DBTX, id int32) (Submission, error) {
	row := db.QueryRow(ctx, getSubmissionById, id)
	var i Submission
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProblemID,
		&i.SourceCode,
		&i.Status,
		&i.ExecutionTimeMs,
		&i.MemoryUsedMb,
		&i.SubmittedAt,
	)
	return i, err
}

const listProblemSubmissions = `-- name: ListProblemSubmissions :many
SELECT id, user_id, problem_id, source_code, status, execution_time_ms, memory_used_mb, submitted_at FROM submissions
WHERE problem_id = $1
ORDER BY submitted_at DESC
`

func (q *Queries) ListProblemSubmissions(ctx context.Context, db DBTX, problemID pgtype.Int4) ([]Submission, error) {
	rows, err := db.Query(ctx, listProblemSubmissions, problemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Submission
	for rows.Next() {
		var i Submission
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProblemID,
			&i.SourceCode,
			&i.Status,
			&i.ExecutionTimeMs,
			&i.MemoryUsedMb,
			&i.SubmittedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserSubmissions = `-- name: ListUserSubmissions :many
SELECT id, user_id, problem_id, source_code, status, execution_time_ms, memory_used_mb, submitted_at FROM submissions
WHERE user_id = $1
ORDER BY submitted_at DESC
`

func (q *Queries) ListUserSubmissions(ctx context.Context, db DBTX, userID pgtype.Int4) ([]Submission, error) {
	rows, err := db.Query(ctx, listUserSubmissions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Submission
	for rows.Next() {
		var i Submission
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProblemID,
			&i.SourceCode,
			&i.Status,
			&i.ExecutionTimeMs,
			&i.MemoryUsedMb,
			&i.SubmittedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubmissionStatus = `-- name: UpdateSubmissionStatus :one
UPDATE submissions
SET status = $2::submission_status, 
    execution_time_ms = $3, 
    memory_used_mb = $4
WHERE id = $1
RETURNING id, user_id, problem_id, source_code, status, execution_time_ms, memory_used_mb, submitted_at
`

type UpdateSubmissionStatusParams struct {
	ID              int32            `db:"id" json:"id"`
	Column2         SubmissionStatus `db:"column_2" json:"column_2"`
	ExecutionTimeMs pgtype.Int4      `db:"execution_time_ms" json:"execution_time_ms"`
	MemoryUsedMb    pgtype.Int4      `db:"memory_used_mb" json:"memory_used_mb"`
}

func (q *Queries) UpdateSubmissionStatus(ctx context.Context, db DBTX, arg UpdateSubmissionStatusParams) (Submission, error) {
	row := db.QueryRow(ctx, updateSubmissionStatus,
		arg.ID,
		arg.Column2,
		arg.ExecutionTimeMs,
		arg.MemoryUsedMb,
	)
	var i Submission
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProblemID,
		&i.SourceCode,
		&i.Status,
		&i.ExecutionTimeMs,
		&i.MemoryUsedMb,
		&i.SubmittedAt,
	)
	return i, err
}
