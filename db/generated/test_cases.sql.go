// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: test_cases.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTestCase = `-- name: CreateTestCase :one
INSERT INTO test_cases (
  problem_id, input, output
) VALUES (
  $1, $2, $3
)
RETURNING id, problem_id, input, output
`

type CreateTestCaseParams struct {
	ProblemID pgtype.Int4 `db:"problem_id" json:"problem_id"`
	Input     string      `db:"input" json:"input"`
	Output    string      `db:"output" json:"output"`
}

func (q *Queries) CreateTestCase(ctx context.Context, arg CreateTestCaseParams) (TestCase, error) {
	row := q.db.QueryRow(ctx, createTestCase, arg.ProblemID, arg.Input, arg.Output)
	var i TestCase
	err := row.Scan(
		&i.ID,
		&i.ProblemID,
		&i.Input,
		&i.Output,
	)
	return i, err
}

const deleteTestCase = `-- name: DeleteTestCase :exec
DELETE FROM test_cases
WHERE id = $1
`

func (q *Queries) DeleteTestCase(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTestCase, id)
	return err
}

const getTestCaseById = `-- name: GetTestCaseById :one
SELECT id, problem_id, input, output FROM test_cases
WHERE id = $1
`

func (q *Queries) GetTestCaseById(ctx context.Context, id int32) (TestCase, error) {
	row := q.db.QueryRow(ctx, getTestCaseById, id)
	var i TestCase
	err := row.Scan(
		&i.ID,
		&i.ProblemID,
		&i.Input,
		&i.Output,
	)
	return i, err
}

const listTestCases = `-- name: ListTestCases :many
SELECT id, problem_id, input, output FROM test_cases
WHERE problem_id = $1
ORDER BY id
`

func (q *Queries) ListTestCases(ctx context.Context, problemID pgtype.Int4) ([]TestCase, error) {
	rows, err := q.db.Query(ctx, listTestCases, problemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TestCase
	for rows.Next() {
		var i TestCase
		if err := rows.Scan(
			&i.ID,
			&i.ProblemID,
			&i.Input,
			&i.Output,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTestCase = `-- name: UpdateTestCase :one
UPDATE test_cases
SET input = $2, output = $3
WHERE id = $1
RETURNING id, problem_id, input, output
`

type UpdateTestCaseParams struct {
	ID     int32  `db:"id" json:"id"`
	Input  string `db:"input" json:"input"`
	Output string `db:"output" json:"output"`
}

func (q *Queries) UpdateTestCase(ctx context.Context, arg UpdateTestCaseParams) (TestCase, error) {
	row := q.db.QueryRow(ctx, updateTestCase, arg.ID, arg.Input, arg.Output)
	var i TestCase
	err := row.Scan(
		&i.ID,
		&i.ProblemID,
		&i.Input,
		&i.Output,
	)
	return i, err
}
